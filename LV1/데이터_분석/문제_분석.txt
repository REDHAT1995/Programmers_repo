# 문제 분석

## 1. 문제 접근 방법
1. 데이터 구조 파악
   - 2차원 리스트로 구성된 데이터
   - 각 행은 [코드 번호, 제조일, 최대 수량, 현재 수량] 형태
   - 컬럼 인덱스는 딕셔너리로 매핑하여 관리

2. 데이터 필터링
   - ext 매개변수에 해당하는 컬럼 값이 val_ext보다 작은 데이터만 추출
   - 리스트 컴프리헨션을 사용하여 효율적으로 필터링

3. 데이터 정렬
   - sort_by 매개변수에 해당하는 컬럼을 기준으로 오름차순 정렬
   - sorted 함수와 lambda를 사용하여 정렬

## 2. 시간 복잡도 분석
- 데이터 필터링: O(n) - 모든 데이터를 한 번씩 순회
- 데이터 정렬: O(n log n) - Python의 Timsort 알고리즘 사용
- 전체 시간 복잡도: O(n log n) - 정렬이 가장 지배적

## 3. 공간 복잡도 분석
- 필터링된 데이터 저장: O(n) - 최악의 경우 모든 데이터가 조건을 만족
- 정렬된 데이터 저장: O(n) - 필터링된 데이터와 동일한 크기
- 전체 공간 복잡도: O(n)

## 4. 최적화 포인트
1. 컬럼 인덱스 매핑
   - 딕셔너리를 사용하여 O(1) 시간에 컬럼 인덱스 접근
   - 코드의 가독성과 유지보수성 향상

2. 리스트 컴프리헨션
   - 필터링 시 리스트 컴프리헨션 사용으로 코드 간결화
   - 메모리 효율성 향상

3. 정렬 알고리즘
   - Python의 내장 정렬 함수 사용으로 안정적인 성능 보장
   - lambda 함수로 정렬 키 지정

## 5. 고려사항
1. 입력값 검증
   - 데이터 형식 및 범위 검증은 문제 조건에 따라 생략
   - 실제 환경에서는 입력값 검증 추가 필요

2. 예외 처리
   - 문제 조건에 따라 최소 1개 이상의 결과 보장
   - 정렬 기준값 중복 없음이 보장되어 추가 처리 불필요

3. 확장성
   - 컬럼 추가/수정 시 column_map만 수정하면 됨
   - 정렬 방향(오름차순/내림차순) 변경 용이 