# 구현 알고리즘 설명

## 1. 데이터 구조 설계
### 1.1 해시맵(딕셔너리) 구조
```python
# 선수 이름 -> 순위 매핑
player_to_rank = {
    "mumu": 0,  # mumu 선수는 0등(1등)
    "soe": 1,   # soe 선수는 1등(2등)
    ...
}

# 순위 -> 선수 이름 매핑
rank_to_player = {
    0: "mumu",  # 0등(1등)은 mumu 선수
    1: "soe",   # 1등(2등)은 soe 선수
    ...
}
```
- 양방향 매핑으로 O(1) 시간에 접근 가능
- enumerate 함수로 초기 매핑 생성
- 순위는 0부터 시작하는 인덱스 사용

### 1.2 매핑 생성 방법
```python
player_to_rank = {player: rank for rank, player in enumerate(players)}
rank_to_player = {rank: player for rank, player in enumerate(players)}
```
- 리스트 컴프리헨션으로 간결하게 구현
- O(n) 시간에 초기 매핑 완료
- 중복 순회 없이 한 번에 생성

## 2. 순위 변경 프로세스
### 2.1 현재 순위 조회
```python
curr_rank = player_to_rank[calling]  # 현재 선수의 순위
prev_rank = curr_rank - 1           # 앞 선수의 순위
prev_player = rank_to_player[prev_rank]  # 앞 선수의 이름
```
- 호출된 선수의 순위를 O(1)에 조회
- 앞 선수의 순위는 현재 순위 - 1
- 앞 선수의 이름도 O(1)에 조회

### 2.2 순위 교환
```python
# 순위 교환
player_to_rank[calling] = prev_rank        # 현재 선수를 한 단계 앞으로
player_to_rank[prev_player] = curr_rank    # 앞 선수를 한 단계 뒤로
rank_to_player[prev_rank] = calling        # 앞 순위에 현재 선수 배치
rank_to_player[curr_rank] = prev_player    # 현재 순위에 앞 선수 배치
```
- 두 선수의 순위를 맞교환
- 양쪽 매핑을 동시에 업데이트
- 일관성 유지를 위해 모두 갱신

## 3. 결과 생성
### 3.1 최종 순위 변환
```python
answer = [rank_to_player[i] for i in range(len(players))]
```
- 순위를 인덱스로 사용하여 선수 이름 조회
- 0부터 순차적으로 접근하여 순서 보장
- 리스트 컴프리헨션으로 간결하게 구현

## 4. 시간 복잡도 분석
### 4.1 초기화 단계
- 해시맵 생성: O(n)
  - players 리스트 순회
  - 각 선수당 상수 시간 작업

### 4.2 순위 변경 단계
- 각 호출 처리: O(1)
  - 순위 조회: O(1)
  - 순위 교환: O(1)
- 전체 호출 처리: O(m)
  - m = callings 길이

### 4.3 결과 생성 단계
- 최종 순위 리스트 생성: O(n)
  - n = players 길이
  - 순차적 순회 한 번

### 4.4 전체 시간 복잡도
- O(n + m)
  - n: players 길이
  - m: callings 길이
  - 선형 시간 복잡도 달성

## 5. 공간 복잡도 분석
### 5.1 사용 메모리
- player_to_rank: O(n)
- rank_to_player: O(n)
- 결과 리스트: O(n)
- 전체 공간 복잡도: O(n)

## 6. 최적화 특징
### 6.1 성능 최적화
- 해시맵으로 O(1) 접근
- 불필요한 리스트 순회 제거
- 메모리 사용 최소화

### 6.2 코드 최적화
- 리스트 컴프리헨션 활용
- 명확한 변수명 사용
- 로직 모듈화 