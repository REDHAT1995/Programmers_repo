[구현 알고리즘 상세 설명]

1. 데이터 구조 초기화
   ```python
   # 입력값 분리 및 초기화
   cast_time, heal_per_sec, bonus_heal = bandage  # 시전 시간, 초당 회복량, 추가 회복량
   max_health = health  # 최대 체력
   current_health = max_health  # 현재 체력을 최대 체력으로 초기화
   continuous_success = 0  # 연속 성공 시간 카운터
   
   # 공격 정보를 시간을 키로 하는 딕셔너리로 변환 (시간 복잡도 개선)
   attack_dict = {time: damage for time, damage in attacks}
   last_attack_time = attacks[-1][0]  # 마지막 공격 시간
   ```

2. 시간별 처리 단계
   ```python
   # 1초부터 마지막 공격 시간까지 시뮬레이션
   for current_time in range(1, last_attack_time + 1):
       # 현재 시간에 공격이 있는 경우
       if current_time in attack_dict:
           # 피해량만큼 체력 감소
           current_health -= attack_dict[current_time]
           # 연속 성공 시간 초기화
           continuous_success = 0
           
           # 체력이 0 이하가 되면 캐릭터 사망
           if current_health <= 0:
               return -1
               
       # 공격이 없는 경우 (회복 진행)
       else:
           # 기본 회복량 적용
           current_health += heal_per_sec
           # 연속 성공 시간 증가
           continuous_success += 1
           
           # 연속 성공 보너스 체크
           if continuous_success == cast_time:
               # 추가 회복량 적용
               current_health += bonus_heal
               # 연속 성공 시간 초기화
               continuous_success = 0
           
           # 최대 체력 초과 방지
           current_health = min(current_health, max_health)
   ```

3. 결과 반환 단계
   ```python
   # 모든 공격이 끝난 후 남은 체력 반환
   return current_health
   ```

4. 최적화 방안
   a) 시간 최적화
      - 딕셔너리를 사용하여 공격 시간 검색 O(1)
      - range를 사용한 순차적 시간 처리
      - 불필요한 계산 최소화
   
   b) 공간 최적화
      - 필요한 변수만 사용
      - 공격 정보를 딕셔너리로 변환하여 효율적인 검색
      - 추가 자료구조 사용 최소화

5. 예외 처리
   a) 체력 관리
      ```python
      # 최대 체력 제한
      current_health = min(current_health, max_health)
      
      # 사망 체크
      if current_health <= 0:
          return -1
      ```
   
   b) 시간 처리
      - 1초부터 마지막 공격 시간까지 순차 처리
      - 공격과 회복의 명확한 구분
      - 연속 성공 시간의 정확한 관리

6. 주의사항
   - 공격 시간에는 회복이 적용되지 않음
   - 연속 성공은 공격 시 즉시 초기화
   - 최대 체력 초과 불가
   - 체력이 0 이하가 되면 즉시 종료
   - 모든 공격이 끝난 후 남은 체력 반환 