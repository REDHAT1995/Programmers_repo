알고리즘 구현 단계:

1. 입력값 검증
   - mats와 park가 비어있는지 확인
   - 비어있으면 -1 반환

2. 돗자리 크기 정렬
   - mats 리스트를 내림차순으로 정렬
   - 가장 큰 돗자리부터 시도하기 위함

3. 공원 크기 확인
   - park의 행 수(rows)와 열 수(cols) 저장
   - 돗자리 크기 검사 시 사용

4. 각 위치에서 돗자리 시도
   - 이중 반복문으로 park의 각 위치 순회
   - 현재 위치가 빈 공간("-1")인지 확인
   - 빈 공간이면 각 돗자리 크기 시도

5. 돗자리 크기 검사
   - 현재 위치에서 size x size 크기의 돗자리를 놓을 수 있는지 확인
   - 공원 범위를 벗어나는지 검사
   - 해당 영역이 모두 빈 공간인지 검사

6. 결과 반환
   - 돗자리를 놓을 수 있으면 해당 크기 반환
   - 모든 시도가 실패하면 -1 반환

핵심 로직 설명:
1. 돗자리 크기 검사 함수
   ```python
   for r in range(i, i + size):
       for c in range(j, j + size):
           if park[r][c] != "-1":
               return False
   return True
   ```

2. 위치 검사
   ```python
   if i + size <= rows and j + size <= cols:
       # 돗자리 크기 검사
   ```

예외 처리 방법:
1. 입력값 검증
   - mats와 park가 비어있는 경우 -1 반환
   - park 배열의 크기가 유효하지 않은 경우 처리

2. 범위 검사
   - 돗자리 크기가 공원 크기를 벗어나는 경우 건너뛰기
   - 인덱스 범위를 벗어나는 경우 처리

3. 결과 처리
   - 돗자리를 놓을 수 없는 경우 -1 반환
   - 가능한 가장 큰 돗자리 크기 반환

최적화 기법:
1. 정렬 최적화
   - mats를 내림차순으로 정렬하여 큰 돗자리부터 시도
   - 첫 번째로 가능한 크기가 최적의 해

2. 탐색 최적화
   - 빈 공간이 아닌 위치는 건너뛰기
   - 돗자리 크기가 공원 크기를 벗어나는 경우 즉시 건너뛰기
   - 한 위치에서 돗자리를 놓을 수 없으면 다음 위치로 이동

3. 메모리 최적화
   - 추가 공간 사용 최소화
   - 입력 배열만 사용하여 결과 계산 