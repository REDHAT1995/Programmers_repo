---
description: 프로젝트 구조 및 파일 조직화 규칙
globs: ["**/*.py", "**/*.txt", "**/*.md"]
alwaysApply: true
---
# 프로젝트 구조 규칙

## 1. 파일 생성 프로세스
### 1.1 입력 정보
- 문제 이름: 문제의 제목 (예: "동영상 재생기")
- 문제 설명: 문제의 요구사항 및 설명

### 1.2 생성할 파일 목록
```
문제이름/
├── solution.py          # 메인 솔루션 파일
├── 문제_설명.txt        # 문제 요구사항 및 설명
├── 문제_분석.txt        # 알고리즘 분석 및 접근 방법
├── 구현_알고리즘.txt     # 상세 구현 방법
└── README.md           # 프로젝트 설명
```

### 1.3 python 버전 관리
python 버전은 3.8이하로 엄격하게 관리

### 1.4 solution.py 기본 구조
```python
from typing import List, Optional, Union

def solution(param1: List[int], param2: List[int]) -> int:
    """
    문제 해결을 위한 메인 함수
    
    Args:
        param1 (List[int]): 첫 번째 매개변수 설명
        param2 (List[int]): 두 번째 매개변수 설명
        
    Returns:
        int: 결과값 설명
        
    Raises:
        ValueError: 입력값이 제한사항을 벗어나는 경우
        
    Examples:
        >>> solution([1, 2], [3, 4])
        5
    """
    # 입력값 검증
    if len(param1) != 2 or len(param2) != 2:
        raise ValueError("param1과 param2의 길이는 2여야 합니다.")
    
    answer = 0
    return answer

def test_solution():
    """
    solution 함수의 테스트를 수행하는 함수
    
    테스트 케이스:
    1. 기본 테스트 케이스
    2. 경계값 테스트 케이스
    3. 예외 케이스
    """
    # 테스트 케이스 1: 기본 케이스
    assert solution([1, 2], [3, 4]) == 5
    
    # 테스트 케이스 2: 경계값 케이스
    assert solution([10, 10], [10, 10]) == 0
    
    # 테스트 케이스 3: 예외 케이스
    try:
        solution([1], [3, 4])
        assert False, "길이가 2가 아닌 경우 예외가 발생해야 합니다."
    except ValueError:
        pass
    
    print("모든 테스트 케이스 통과!")

if __name__ == "__main__":
    test_solution()
```

## 2. 파일 작성 규칙

### 2.1 solution.py 작성 규칙
1. Type Hints
   - typing 모듈에서 필요한 타입 임포트
   - 매개변수와 반환값에 타입 힌트 명시
   - List, Optional, Union 등 복합 타입 사용

2. Docstring
   - 함수 설명
   - Args 섹션: 매개변수 설명
   - Returns 섹션: 반환값 설명
   - Raises 섹션: 발생 가능한 예외 설명
   - Examples 섹션: 사용 예시

3. 입력값 검증
   - 매개변수 길이 검증
   - 값의 범위 검증
   - 제한사항 준수 여부 확인

4. 테스트 케이스
   - 기본 테스트 케이스
   - 경계값 테스트 케이스
   - 예외 케이스
   - 각 테스트 케이스에 대한 설명 주석

5. 코드 구조
   - answer 변수 초기화
   - 입력값 검증
   - 알고리즘 구현 (파일 생성 시 제외)
   - 결과 반환

### 2.2 solution.py 생성 시 주의사항
- 코드 수정이 아니고 파일 생성이라면 `solution()` 함수와 `test_solution()` 함수의 기본적인 뼈대만 구성
- 내부 알고리즘 구현을 엄격하게 금함
- 메인 솔루션 함수는 `solution()`으로 명명
- 함수는 반드시 결과값을 반환해야 함
- 반환값은 문제 설명에 명시된 형식과 타입을 정확히 따라야 함
- 반환값 변수명은 `answer`로 통일
- 메인 실행 코드는 `if __name__ == "__main__":` 블록에 작성
- 테스트 케이스 검증 코드 포함
- Type hints와 docstring 필수

### 2.3 문제_설명.txt
- 문제 제목
- 문제 설명
- 입력 형식
- 출력 형식
- 제약 조건
- 예시 입력/출력
- 테스트 케이스

### 2.4 문제_분석.txt
- 문제 접근 방법
- 사용할 알고리즘 설명
- 시간/공간 복잡도 분석
- 최적화 포인트
- 고려사항

### 2.5 구현_알고리즘.txt
- 알고리즘 구현 단계
- 핵심 로직 설명
- 예외 처리 방법
- 최적화 기법

#### 2.6 README.md
- 문제 설명 요약
- 실행 방법
- 테스트 방법
- 성능 분석
- 개선 사항

### 2.7 README.md 알고리즘 순서도 작성 규칙
1. Mermaid 다이어그램 기본 구조
   ```markdown
   ## 알고리즘 순서도
   ```mermaid
   flowchart TD
       A[시작] --> B[첫 단계]
       B --> C[다음 단계]
       // ... 추가 단계들
   ```
   ```

2. 노드 작성 규칙
   - 단순하고 명확한 텍스트 사용
   - 특수 문자 및 줄바꿈 사용 제한
   - 변수명이나 구체적인 코드 대신 동작 설명
   - 노드당 3줄 이내로 제한

3. 노드 유형별 표현
   a) 프로세스 노드
      ```mermaid
      A[일반 프로세스]
      ```
   
   b) 조건 노드
      ```mermaid
      B{조건 검사}
      ```
   
   c) 시작/종료 노드
      ```mermaid
      C([시작/종료])
      ```

4. 화살표 연결
   - 기본 연결: -->
   - 조건부 연결: -->|Yes| 또는 -->|No|
   - 명확한 흐름 방향 유지

5. 레이아웃 규칙
   - 위에서 아래로 진행
   - 왼쪽에서 오른쪽으로 분기
   - 교차 최소화
   - 적절한 간격 유지

6. 내용 구성
   a) 필수 포함 요소
      - 초기화 단계
      - 주요 로직 단계
      - 조건 분기
      - 반복 구조
      - 종료 조건
   
   b) 표현 방식
      - 동작 중심 설명
      - 간단한 조건문
      - 명확한 프로세스 흐름
      - 핵심 알고리즘 단계 강조

7. 예시 템플릿
   ```mermaid
   flowchart TD
       A[시작] --> B[초기화]
       B --> C[주요 로직]
       C --> D{조건 검사}
       D -->|Yes| E[처리 1]
       D -->|No| F[처리 2]
       E --> G[다음 단계]
       F --> G
       G --> H[종료]
   ```

8. 주의사항
   - GitHub 렌더링 호환성 확인
   - 복잡한 수식 사용 제한
   - 과도한 세부사항 제외
   - 일관된 스타일 유지




